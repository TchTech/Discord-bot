"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
exports.runtime = void 0;

const config_1 = require("./config");

const discord_js_1 = require("discord.js");

const cordeBot_1 = require("../core/cordeBot");

const errors_1 = require("../errors");

const consts_1 = require("../consts");

const Environment = {
  isUnityTest: process.env.ENV === "UNITY_TEST",
  isE2eTest: process.env.ENV === "E2E_TEST",
};

class Runtime {
  constructor() {
    this._configs = new config_1.Config();
  }

  get bot() {
    if (!this._bot) {
      this._bot = this.initBot();
    }

    return this._bot;
  }

  get isTestEnv() {
    return this.environment.isE2eTest || this.environment.isUnityTest;
  }

  get environment() {
    return Environment;
  }

  get events() {
    return this.bot.events;
  }

  get configs() {
    return this._configs;
  }

  get cordeBotToken() {
    return this._configs.cordeBotToken;
  }

  get botTestId() {
    return this._configs.botTestId;
  }

  get botToken() {
    return this._configs.botToken;
  }

  get channelId() {
    return this._configs.channelId;
  }

  get guildId() {
    return this._configs.guildId;
  }

  get timeOut() {
    return this._configs.timeOut ?? consts_1.DEFAULT_TEST_TIMEOUT;
  }

  get botPrefix() {
    return this._configs.botPrefix;
  }

  get testMatches() {
    return this._configs.testMatches;
  }

  get modulePathIgnorePatterns() {
    return this._configs.modulePathIgnorePatterns;
  }

  static getInstance() {
    if (!Runtime._instance) {
      Runtime._instance = new Runtime();
    }

    return Runtime._instance;
  }

  setConfigs(_configs, forceUpdate) {
    if (!_configs) {
      throw new errors_1.ConfigError("Invalid _configs");
    }

    this._configs.setConfigs(_configs, forceUpdate);
  }

  isBotLoggedIn() {
    return this.bot && this.bot.isLoggedIn();
  }

  logoffBot() {
    if (this._bot) {
      this._bot.logout();
    }
  }

  async loginBot(token) {
    return await this.bot.login(token);
  }

  injectBot(fn) {
    return fn(this.bot);
  }

  initBot() {
    return new cordeBot_1.CordeBot(
      this._configs.botPrefix,
      this._configs.guildId,
      this._configs.channelId,
      this._configs.botTestId,
      new discord_js_1.Client(),
    );
  }
}

const runtime = Runtime.getInstance();
exports.runtime = runtime;

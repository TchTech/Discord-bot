"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
exports._main = exports.program = void 0;

const tslib_1 = require("tslib");

const commander_1 = require("commander");

const exec_1 = require("./exec");

const init_1 = require("./init");

const validate_1 = require("./validate");

const package_1 = tslib_1.__importDefault(require("../package"));

const runtime_1 = require("../common/runtime");

const reader_1 = require("../core/reader");

const envVariables_1 = require("../envVariables");

const errorHandler_1 = require("../errorHandler");

errorHandler_1.initErrorHandlers();
envVariables_1.initEnvVariables();
exports.program = new commander_1.Command();
exports.program
  .name("Corde")
  .usage("to start testings o corde [option] to use a specific command.")
  .description(package_1.default.description)
  .version(`v${package_1.default.version}`, "-v, --version");
exports.program
  .option("-c, --config <type>", "Set config file path")
  .option(
    "-f, --files <path>",
    "Set the path for all tests. Use this if you wan to specify a single path." +
      " for Array, use only 'corde <path1> <path2>'",
  )
  .action(async (args) => {
    const options = exports.program.opts();

    if (options.config) {
      runtime_1.runtime.configFilePath = options.config;
    }

    if (args) {
      runtime_1.runtime.setConfigs(
        {
          testMatches: exports.program.args,
        },
        true,
      );
    }

    if (options.files) {
      runtime_1.runtime.setConfigs(
        {
          testMatches: options.files.split(" "),
        },
        true,
      );
    }

    await exec_1.exec();
  });
exports.program
  .command("init [type]")
  .alias("i")
  .description("Initialize a config file with all possible options")
  .usage("[js ts json] or empty for default type (json)")
  .action((type) => {
    init_1.init(type);
  });
exports.program
  .command("validate")
  .alias("v")
  .description("Search for corde configs and check if all data are valid")
  .action(async () => {
    const configs = reader_1.reader.loadConfig();
    await validate_1.validate(configs);
    console.log("All configs are ok!");
  });

if (process.env.ENV !== "UNITY_TEST" && process.env.ENV !== "E2E_TEST") {
  _main();
}

async function _main(args) {
  await exports.program.parseAsync(args ?? process.argv);
}

exports._main = _main;

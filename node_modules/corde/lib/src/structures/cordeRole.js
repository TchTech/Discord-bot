"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true,
});
exports.CordeRole = void 0;

const utils_1 = require("../utils");

class CordeRole {
  constructor(role) {
    this._role = role;
  }

  get color() {
    return this._role.color;
  }

  get createdAt() {
    return this._role.createdAt;
  }

  get isDeleted() {
    return this._role.deleted;
  }

  get isEditable() {
    return this._role.editable;
  }

  get hexColor() {
    return this._role.hexColor;
  }

  get isHoist() {
    return this._role.hoist;
  }

  get id() {
    return this._role.id;
  }

  get isManaged() {
    return this._role.managed;
  }

  get isMentionable() {
    return this._role.mentionable;
  }

  get name() {
    return this._role.name;
  }

  get position() {
    return this._role.rawPosition;
  }

  async delete() {
    await this._role.delete();
  }

  async updatePosition(position) {
    this._role = await this._role.setPosition(position);
    return this;
  }

  async updateName(newName) {
    this._role = await this._role.setName(newName);
    return this;
  }

  async updateMentionable(mentionable) {
    this._role = await this._role.setMentionable(mentionable);
    return this;
  }

  async updateHoist(hoist) {
    this._role = await this._role.setHoist(hoist);
    return this;
  }

  async updateColor(newColor) {
    const color = utils_1.resolveColor(newColor);
    this._role = await this._role.setColor(color);
    return this;
  }

  async updatePermissions(...permissions) {
    this._role = await this._role.setPermissions(permissions);
    return this;
  }

  async update(data) {
    if (!data) {
      return this;
    }

    this._role = await this._role.edit({
      color: data.color ? utils_1.resolveColor(data.color) : undefined,
      hoist: data.isHoist,
      mentionable: data.isMentionable,
      name: data.name,
      permissions: data.permissions,
      position: data.position,
    });
    return this;
  }
}

exports.CordeRole = CordeRole;
